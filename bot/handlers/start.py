from aiogram import Router, types
from aiogram.filters import Command
from bot.db import db
import os
from aiogram.types import ChatJoinRequest
from aiogram.types.input_file import FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from bot.utils.redis_provider import r
from bot.utils.captcha_generatot import gen_captcha
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from bot.main import bot
router = Router()


async def get_menu_data(user_id: int):
    row = await db.fetchrow("SELECT quest_lvl FROM users WHERE telegram_id = $1", user_id)
    quest_lvl = row["quest_lvl"] if row else None
    photo = None

    if quest_lvl == 1:
        text = (
            "üò≠ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–ø–ª–∞—Ç—ã –ø–æ 200 —Ä—É–±–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å 600 —Ä—É–±–ª–µ–π!! –ñ–º–∏ '–•–û–ß–£'</b>"
        )
    else:
        text = (
            "üò≥ –û—Ö, —Ç—ã —Ö–æ—á–µ—à—å –≤ —Å—É–º–º–µ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 600 —Ä—É–±–ª–µ–π? –ù—É –¥–µ—Ä–∂–∏!!\n\n"
            "<b>üìå –£—Å–ª–æ–≤–∏—è:</b>\n"
            "<blockquote>"
            "- –°–∫–∞—á–∞—Ç—å –∏–≥—Ä—É Hassle Online // Radmir RP (—Å—Å—ã–ª–∫–∏ –≤–Ω–∏–∑—É)\n\n"
            "- –ü—Ä–æ–∫–∞—á–∞—Ç—å –≤ –∏–≥—Ä–µ 3 —É—Ä–æ–≤–µ–Ω—å\n\n"
            "- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"
            "- –í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É <code>/pcode</code> –∏ <code>#gang</code> <b>–ù–ê 8 –°–ï–†–í–ï–†–ï</b>\n"
            "</blockquote>\n"
            "<b>üì¢ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:</b> @vladimiras01\n\n"
            "üì• –û–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç –∏ –≤—ã–ø–ª–∞—Ç–∏—Ç –¥–µ–Ω—å–≥–∏, —Ç–æ–ª—å–∫–æ —Å–∫–∏–Ω—å –µ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π\n\n"
            "üì≤ –°–∫–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞ Android: <a href='https://play.google.com/store/apps/details?id=com.hassle.online'>Google Play</a> (—Ç—ã–∫)\n"
            "üì∫ –°–∫–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞ iOS: <a href='https://apps.apple.com/us/app/hassle-online/id1624507378?l=ru'>App Store</a> (—Ç—ã–∫)\n"
            "üíª –°–∫–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞ –ü–ö: <a href='https://radmir.online/'>Radmir Online</a> (—Ç—ã–∫)\n\n"
            "–ñ–µ–ª–∞—é —É–¥–∞—á–∏!\n\n"
            "<b>‚≠ê –û–¢–ó–´–í–´ –û –í–´–ü–õ–ê–¢–ê–• 600–†:</b>\n https://t.me/otz_br600\n\n"
            "‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª"
        )
        photo = os.path.join(os.path.dirname(__file__), '..', 'img', 'sber.jpg')

    if quest_lvl == 1:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–•–û–ß–£", callback_data="get_600"),]
            ]
        )
    else:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="–í—ã–ø–ª–∞—Ç–∞", callback_data="payout"),
                    types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data="reviews"),
                    types.InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å", callback_data="balance"),
                    types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="get_account"),
                ]
            ]
        )

    return text, keyboard, photo


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await db.execute(
        "INSERT INTO users (telegram_id, username) VALUES ($1, $2) ON CONFLICT DO NOTHING",
        message.from_user.id, message.from_user.username
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="get_account"),
                #types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å 600 –†", callback_data="get_600_r"),
            ]
        ]
    )
    await message.answer("–ú–µ–Ω—é", reply_markup=keyboard)

    # if photo:
    #     photo_file = FSInputFile(photo)
    #     await message.answer_photo(photo=photo_file, caption=text, disable_web_page_preview=True)
    #     await message.answer("–ú–µ–Ω—é", reply_markup=keyboard)

@router.chat_join_request()
async def handle_join_request(event: ChatJoinRequest):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.execute(
        "INSERT INTO users (telegram_id, username) VALUES ($1, $2) ON CONFLICT DO NOTHING",
        event.from_user.id,
        event.from_user.username
    )

    await asyncio.sleep(2)
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="–î–ê", callback_data="menu"),
            ]
        ]
    )
    try:
        await event.bot.send_message(
            event.from_user.id,
            "ü§© –ü—Ä–∏–≤–µ—Ç!! –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç?\n\n –¢–æ–≥–¥–∞ –∂–º–∏ –∫–Ω–æ–ø–∫—É '–î–ê'",
            reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@router.callback_query(lambda c: c.data == "reviews")
async def reviews_callback(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()

    menu_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]
        ]
    )
    user = await db.fetchrow("SELECT balance FROM users WHERE telegram_id = $1", call.from_user.id)
    value = user["balance"] if user else 0
    if value == 0:
        text = (
            "–ù–∞—à–∏ –æ—Ç–∑—ã–≤—ã —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ üëáüëá\n\n"
            "https://t.me/br_otz\n\n"
            "ü•≥ –£–∂–µ –¥–µ—Å—è—Ç–∫–∏ –ª—é–¥–µ–π –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏!! –ß–µ–º —Ç—ã —Ö—É–∂–µ? –î–µ–π—Å—Ç–≤—É–π!!"
        )
    else:
        text = (
            "–£–∂–µ –º–Ω–æ–≥–æ –ª—é–¥–µ–π –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –Ω–∞—Å –ø–æ 600—Ä üëáüëá\n\n"
            "https://t.me/otz_br600\n\n"
            "–î–µ—Ä–∑–∞–π!!"
        )
    await call.message.answer(text, reply_markup=menu_keyboard)


@router.callback_query(lambda c: c.data == "balance")
async def balance_callback(call: types.CallbackQuery):
    user = await db.fetchrow("SELECT balance FROM users WHERE telegram_id = $1", call.from_user.id)
    value = user["balance"] if user else 0
    await call.answer()
    await call.message.delete()

    menu_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]
        ]
    )
    await call.message.answer(
        f"ü§© –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {value}‚ÇΩ.\n\n–î–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª '–í—ã–ø–ª–∞—Ç–∞'",
        reply_markup=menu_keyboard
    )


@router.callback_query(lambda c: c.data == "menu")
async def menu_callback(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()
    get_acc = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="get_account")]
        ]
    )
    await call.message.answer("–ú–µ–Ω—é", reply_markup=get_acc)

    # text, keyboard, photo = await get_menu_data(call.from_user.id)
    # if photo:
    #     from aiogram.types.input_file import FSInputFile
    #     photo_file = FSInputFile(photo)
    #     await call.message.answer_photo(photo=photo_file, caption=text, disable_web_page_preview=True)
    #     await call.message.answer("–ú–µ–Ω—é", reply_markup=keyboard)
    # else:
    #     await call.message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(lambda c: c.data == "get_600")
async def get_600_callback(call: types.CallbackQuery):
    await call.answer()
    # —Å—Ç–∞–≤–∏–º —Ç–∏–ø—É 2 –ª–≤–ª –∏ –∫–∏–¥–∞–µ–º –æ–ø—è—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await db.execute("UPDATE users SET quest_lvl = 2, has_sent_screenshot = True WHERE telegram_id = $1", call.from_user.id)
    await menu_callback(call)

REQUIRED_CHANNELS = [
    "https://t.me/brnews09",
    "https://t.me/blackrussia_ry",
    "https://t.me/novostibr001",
]

CHANNEL_USERNAMES = [
    "novostibr001",
    "blackrussia_ry",
    "brnews09"
]


def get_subscription_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=link)]
        for link in REQUIRED_CHANNELS
    ]
    buttons.append([InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def check_user_subscriptions(user_id: int) -> bool:
    for channel in CHANNEL_USERNAMES:
        try:
            member = await bot.get_chat_member(chat_id=f"@{channel}", user_id=user_id)
            if member.status not in ["member", "creator", "administrator"]:
                return False
        except TelegramBadRequest:
            return False
    return True

@router.callback_query(lambda c: c.data == "get_account")
async def get_account_callback(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()
    is_subscribed = await check_user_subscriptions(call.from_user.id)
    if not is_subscribed:
        await call.message.answer(
            "üéâ –¢—ã –≤—ã–±—Ä–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            "–û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–ø—á—É
    text, path = await gen_captcha()
    r.set(f"captcha:{call.from_user.id}", text, ex=300)  # —Ö—Ä–∞–Ω–∏—Ç—Å—è 5 –º–∏–Ω
    await call.message.answer_photo(photo=FSInputFile(path),
                                    caption="üó® <b>–í–≤–µ–¥–∏ –∫–∞–ø—á—É, —á—Ç–æ–± –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>",
                                    reply_markup=None)
    return

@router.message(lambda m: r.exists(f"captcha:{m.from_user.id}"))
async def captcha_verify(message: types.Message):
    key = f"captcha:{message.from_user.id}"
    real = r.get(key).decode()
    r.delete(key)
    if message.text.strip().upper() == real:
        # –í—Å—ë –Ω–æ—Ä–º, —á–µ–ª –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –∫–∏–¥–∞–µ–º —É—á—ë—Ç–∫—É
        username = r.get("current_username").decode()
        password = r.get("current_password").decode()
        server = r.get("current_server").decode()
        menu_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="get_account")]
            ]
        )
        await message.answer(
            f"ü§ë –ê –≤–æ—Ç –∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"<b>üë§ –ù–∏–∫: {username}\n</b>"
            f"<b>üîë –ü–∞—Ä–æ–ª—å: {password}\n</b>"
            f"<b>üåê –°–µ—Ä–≤–µ—Ä: {server}\n\n</b>"
            f"üó® –í–ù–ò–ú–ê–ù–ò–ï!  –ö–∞–∂–¥—ã–π —á–∞—Å —Å 59 –º–∏–Ω—É—Ç –ø–æ 00 –º–∏–Ω—É—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç—ã!!\n"
            f"ü´° –ï—Å–ª–∏ –Ω–∏–∫ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –∑–∞–±—Ä–∞–ª–∏. –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —É —Ç–µ–±—è 24 —à–∞–Ω—Å–∞ –≤ —Å—É—Ç–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ!",
            reply_markup=menu_keyboard
        )
    else:
        text, path = await gen_captcha()
        r.set(f"captcha:{message.from_user.id}", text, ex=300)  # —Ö—Ä–∞–Ω–∏—Ç—Å—è 5 –º–∏–Ω
        await message.answer_photo(photo=FSInputFile(path),
                                        caption="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                                        reply_markup=None)

@router.callback_query(lambda c: c.data == "check_subs")
async def recheck_subs(call: types.CallbackQuery):

    await call.answer()
    is_subscribed = await check_user_subscriptions(call.from_user.id)
    if not is_subscribed:
        await call.message.answer(
            "‚ùå –ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –≤—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞:",
            reply_markup=get_subscription_keyboard()
        )
        return
    await get_account_callback(call)