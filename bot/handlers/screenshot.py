from aiogram import Router, types, F, Bot
from aiogram.enums import ChatType
from aiogram.types import InputMediaPhoto
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
import asyncio  # –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
from bot.utils.redis_provider import r

from bot.config import LOG_CHAT_ID, TIMER_TIME, EXAMPLE_IDS
from bot.db import db
from bot.utils.vk_ocr import VKService

timer_time = TIMER_TIME

router = Router()


class PayoutStates(StatesGroup):
    waiting_for_details = State()

REQUIRED_TEXTS = ["—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ø—Ä–æ–π–¥–µ–Ω–∞", "—É—Å–ø–µ—à–Ω–æ", "—É–¥–∞—á–Ω–æ–π", "–Ω–∞—á–∞—Ç—å", "–∏–≥—Ä—É"]
REQUIRED_COLOR = (30, 237, 130)

@router.message(F.photo, F.chat.type == ChatType.PRIVATE)
async def handle_screenshot(message: types.Message, bot: Bot, state: FSMContext, **data):
    # –ø–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ –∏–∑ –ë–î
    user = await db.fetchrow(
        "SELECT balance, has_sent_screenshot FROM users WHERE telegram_id = $1",
        message.from_user.id
    )
    if not user or user["has_sent_screenshot"]:
        await message.answer(
            "üòî –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]]
            )
        )
        return

    # —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
    file = await bot.get_file(message.photo[-1].file_id)
    data_bytes = (await bot.download_file(file.file_path)).read()
    vk_ocr: VKService = data["vk_service_ocr"]
    img_text = await vk_ocr.recognize_text(data_bytes)
    is_valid = await vk_ocr.validate_screen(img_text)

    if is_valid:
        # –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∏ –æ—Ç–º–µ—á–∞–µ–º —Å–∫—Ä–∏–Ω –ø—Ä–∏–Ω—è—Ç
        await db.execute(
            "UPDATE users SET balance = balance + 200, has_sent_screenshot = TRUE WHERE telegram_id = $1",
            message.from_user.id
        )

        # –ø—Ä–æ—Å–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="change_details")]]
        )
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –≤—ã–ø–ª–∞—Ç—É!\n\n"
            "üí≥ –°–∫–∏–Ω—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ù–∏–∫ –∏ —Å–µ—Ä–≤–µ—Ä –∫—É–¥–∞ –¥–æ–Ω–∞—Ç–∏–º, –ª–∏–±–æ –∏–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.\n\n"
            "üìã –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. <b>–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã'</b>",
            reply_markup=keyboard
        )
        await state.set_state(PayoutStates.waiting_for_details)
    else:
        # –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É ‚Äî –∫–∏–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        media = [InputMediaPhoto(media=pid) for pid in EXAMPLE_IDS]
        await bot.send_media_group(message.from_user.id, media)
        await message.answer(
            "üò¢ –ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π —Å–∫—Ä–∏–Ω. –°–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–∏–¥–∞–π –Ω–æ–≤—ã–π.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]]
            )
        )

    # –ª–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞–º
    valid_str = "–î–∞" if is_valid else "–ù–µ—Ç"
    await bot.send_photo(
        LOG_CHAT_ID, message.photo[-1].file_id,
        caption=f"@{message.from_user.username or message.from_user.id} | –í–∞–ª–∏–¥–Ω—ã–π: {valid_str}\n\n–¢–µ–∫—Å—Ç: {img_text}"
    )

@router.callback_query(lambda c: c.data == "change_details")
async def change_details_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    user_id = call.from_user.id
    redis_key = f"payout:{user_id}"
    # —É–¥–∞–ª—è–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã —Ç–∞—Å–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
    r.delete(redis_key)
    await call.message.answer("üí∞ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!")
    await state.set_state(PayoutStates.waiting_for_details)

@router.message(StateFilter(PayoutStates.waiting_for_details), F.chat.type == ChatType.PRIVATE)
async def handle_payout_details(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    redis_key = f"payout:{user_id}"

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –ë–î
    await db.execute(
        "UPDATE users SET payout_details = $1 WHERE telegram_id = $2",
        message.text, user_id
    )
    # —Å–æ–∑–¥–∞—ë–º –∫–ª—é—á —Å TTL 60 —Å–µ–∫
    r.set(redis_key, "1", ex=timer_time)

    await message.answer("‚úÖ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã! –û–∂–∏–¥–∞–π –≤—ã–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–∏ –ø–∞—Ä—ã –º–∏–Ω—É—Ç.")
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞—Å–∫, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–ª—é—á
    asyncio.create_task(notify_min_payout_limit(user_id, message.bot))
    await state.clear()

async def notify_min_payout_limit(user_id: int, bot: Bot):
    await asyncio.sleep(timer_time - 1)
    redis_key = f"payout:{user_id}"
    exists = r.exists(redis_key)
    if exists:
        row = await db.fetchrow("SELECT quest_lvl FROM users WHERE telegram_id = $1", user_id)
        quest_lvl = row["quest_lvl"] if row else None
        if quest_lvl <=1:
            await db.execute("UPDATE users SET quest_lvl = quest_lvl + 1 WHERE telegram_id = $1", user_id)
        await bot.send_message(
            user_id,
            "üôÅ –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–º–æ–∑–∏—Ç –≤—ã–ø–ª–∞—Ç—ã –¥–æ <b>500¬†‚ÇΩ</b>\n\n"
            "–ù–æ —è –∑–Ω–∞—é, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª—ã—Ö 600‚ÇΩ! –ñ–º–∏ '–ü–û–õ–£–ß–ò–¢–¨'.", 
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å", callback_data="menu")]]
            )
        )
        # —á–∏—Å—Ç–∏–º –∫–ª—é—á, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        r.delete(redis_key)
